// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DownShiftInput should return color tokens when type is color 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        aria-expanded="false"
        aria-haspopup="listbox"
        aria-labelledby="downshift-0-label"
        role="combobox"
        style="position: relative;"
      >
        <div
          class="c-dhzjXW c-dhzjXW-ejCoEP-direction-row c-dhzjXW-jroWjL-align-center c-dhzjXW-knmidH-justify-between c-dhzjXW-igyRKyD-css"
        />
        <div
          class="c-PJLV c-PJLV-ifrnwId-css input"
        >
          <div
            style="position: relative; overflow-y: visible; width: 100%;"
          >
            <div>
              <div
                style="position: relative; box-sizing: border-box; width: 100%; color: transparent; overflow: hidden; white-space: pre; border: 1px solid transparent; text-align: start;"
              >
                 
              </div>
              <input
                autocomplete="off"
                name="value"
                style="display: block; width: 100%; position: absolute; margin: 0px; top: 0px; left: 0px; box-sizing: border-box; font-family: inherit; letter-spacing: inherit; height: 28px; border-radius: var(--radii-input);"
                type="text"
                value=""
              />
            </div>
          </div>
          <button
            class="c-kZNXun"
            data-testid="downshift-input-suffix-button"
            type="button"
          >
            <test-file-stub
              classname="c-ihlUbt"
            />
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      aria-expanded="false"
      aria-haspopup="listbox"
      aria-labelledby="downshift-0-label"
      role="combobox"
      style="position: relative;"
    >
      <div
        class="c-dhzjXW c-dhzjXW-ejCoEP-direction-row c-dhzjXW-jroWjL-align-center c-dhzjXW-knmidH-justify-between c-dhzjXW-igyRKyD-css"
      />
      <div
        class="c-PJLV c-PJLV-ifrnwId-css input"
      >
        <div
          style="position: relative; overflow-y: visible; width: 100%;"
        >
          <div>
            <div
              style="position: relative; box-sizing: border-box; width: 100%; color: transparent; overflow: hidden; white-space: pre; border: 1px solid transparent; text-align: start;"
            >
               
            </div>
            <input
              autocomplete="off"
              name="value"
              style="display: block; width: 100%; position: absolute; margin: 0px; top: 0px; left: 0px; box-sizing: border-box; font-family: inherit; letter-spacing: inherit; height: 28px; border-radius: var(--radii-input);"
              type="text"
              value=""
            />
          </div>
        </div>
        <button
          class="c-kZNXun"
          data-testid="downshift-input-suffix-button"
          type="button"
        >
          <test-file-stub
            classname="c-ihlUbt"
          />
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DownShiftInput should return font values when type is fontFamily 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        aria-expanded="false"
        aria-haspopup="listbox"
        aria-labelledby="downshift-1-label"
        role="combobox"
        style="position: relative;"
      >
        <div
          class="c-dhzjXW c-dhzjXW-ejCoEP-direction-row c-dhzjXW-jroWjL-align-center c-dhzjXW-knmidH-justify-between c-dhzjXW-igyRKyD-css"
        />
        <div
          class="c-PJLV c-PJLV-ifrnwId-css input"
        >
          <div
            style="position: relative; overflow-y: visible; width: 100%;"
          >
            <div>
              <div
                style="position: relative; box-sizing: border-box; width: 100%; color: transparent; overflow: hidden; white-space: pre; border: 1px solid transparent; text-align: start;"
              >
                 
              </div>
              <input
                autocomplete="off"
                name="value"
                style="display: block; width: 100%; position: absolute; margin: 0px; top: 0px; left: 0px; box-sizing: border-box; font-family: inherit; letter-spacing: inherit; height: 28px; border-radius: var(--radii-input);"
                type="text"
                value=""
              />
            </div>
          </div>
          <button
            class="c-kZNXun"
            data-testid="downshift-input-suffix-button"
            type="button"
          >
            <test-file-stub
              classname="c-ihlUbt"
            />
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      aria-expanded="false"
      aria-haspopup="listbox"
      aria-labelledby="downshift-1-label"
      role="combobox"
      style="position: relative;"
    >
      <div
        class="c-dhzjXW c-dhzjXW-ejCoEP-direction-row c-dhzjXW-jroWjL-align-center c-dhzjXW-knmidH-justify-between c-dhzjXW-igyRKyD-css"
      />
      <div
        class="c-PJLV c-PJLV-ifrnwId-css input"
      >
        <div
          style="position: relative; overflow-y: visible; width: 100%;"
        >
          <div>
            <div
              style="position: relative; box-sizing: border-box; width: 100%; color: transparent; overflow: hidden; white-space: pre; border: 1px solid transparent; text-align: start;"
            >
               
            </div>
            <input
              autocomplete="off"
              name="value"
              style="display: block; width: 100%; position: absolute; margin: 0px; top: 0px; left: 0px; box-sizing: border-box; font-family: inherit; letter-spacing: inherit; height: 28px; border-radius: var(--radii-input);"
              type="text"
              value=""
            />
          </div>
        </div>
        <button
          class="c-kZNXun"
          data-testid="downshift-input-suffix-button"
          type="button"
        >
          <test-file-stub
            classname="c-ihlUbt"
          />
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
